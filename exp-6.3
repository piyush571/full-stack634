require('dotenv').config();
const express = require('express');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');

const app = express();
app.use(express.json());

const PORT = process.env.PORT || 4000;

// --- In-memory mock database ---
let users = [
  { id: 1, username: 'alice', password: '', balance: 1000 },
  { id: 2, username: 'bob', password: '', balance: 500 }
];

// Initialize hashed passwords
(async () => {
  for (let user of users) {
    user.password = await bcrypt.hash(user.username + '123', 10); // example password: alice123
  }
})();

// --- JWT Authentication Middleware ---
function authMiddleware(req, res, next) {
  const authHeader = req.headers['authorization'];
  if (!authHeader) return res.status(401).json({ error: 'Missing Authorization header' });

  const token = authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'Missing token' });

  try {
    const user = jwt.verify(token, process.env.JWT_SECRET);
    req.user = user; // attach decoded payload
    next();
  } catch (err) {
    return res.status(403).json({ error: 'Invalid or expired token' });
  }
}

// --- LOGIN Route ---
app.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const user = users.find(u => u.username === username);
  if (!user) return res.status(404).json({ error: 'User not found' });

  const valid = await bcrypt.compare(password, user.password);
  if (!valid) return res.status(401).json({ error: 'Invalid credentials' });

  const token = jwt.sign({ id: user.id, username: user.username }, process.env.JWT_SECRET, { expiresIn: '1h' });
  res.json({ message: 'Login successful', token });
});

// --- VIEW BALANCE (Protected) ---
app.get('/balance', authMiddleware, (req, res) => {
  const user = users.find(u => u.id === req.user.id);
  res.json({ username: user.username, balance: user.balance });
});

// --- TRANSFER FUNDS (Protected) ---
app.post('/transfer', authMiddleware, (req, res) => {
  const { to, amount } = req.body;
  const sender = users.find(u => u.id === req.user.id);
  const receiver = users.find(u => u.username === to);

  // Validate inputs
  if (!receiver) return res.status(404).json({ error: 'Receiver not found' });
  if (amount <= 0) return res.status(400).json({ error: 'Invalid transfer amount' });
  if (sender.balance < amount) return res.status(400).json({ error: 'Insufficient balance' });

  // Perform transfer
  sender.balance -= amount;
  receiver.balance += amount;

  res.json({
    message: 'Transfer successful',
    from: sender.username,
    to: receiver.username,
    amount,
    remaining_balance: sender.balance
  });
});

// --- SERVER START ---
app.listen(PORT, () => console.log(`Bank API running on port ${PORT}`));
